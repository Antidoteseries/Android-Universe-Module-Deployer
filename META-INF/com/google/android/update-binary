#!/sbin/sh
# Deploy script for recovery
# This is a part of Android Universe Module Deployer
# Author: Antidotes
# Source: https://github.com/Antidoteseries/Android-Universe-Module-Deployer
# Licenced by GPLv3
# Version: 0.3.2 Alpha
###########################################################################

# Initial Define
export PackageSource="$3"
export PrintOut="/proc/self/fd/$2"
export TempFolder="/tmp"
export LogEnabled="true"
case "$(uname -m)" in
*86*) export Architecture="x86" ;;
*ar*) export Architecture="arm" ;;
*)
  echo "ui_print ! ERROR: Unsupported Architecture" >"$PrintOut"
  exit 1
  ;;
esac

# Prepare for getting data from Config.ini
INIRead() {
  local INIFile=$1
  local INISect=$2
  local INIKey=$3
  local INIResult=$($InternalBusyBox awk -F '=' '/\['$INISect'\]/ {FIND=1} FIND==1 && $1~/'$INIKey'/ {print $2;exit}' $INIFile)
  echo $INIResult
}

# Prepare Log
if [ "$LogEnabled" == "true" ]; then
  echo "Install Log for Android Universe Module Deployer" >"$TempFolder/InstallLog.log"
fi
Log() {
  if [ "$LogEnabled" == "true" ]; then
    local LogAction="$1"
    local LogContent="$2"
    case "$LogAction" in
    Divide)
      echo "================================================" >>"$TempFolder/InstallLog.log"
      ;;
    Single)
      echo "$LogContent" >>"$TempFolder/InstallLog.log"
      ;;
    Center)
      local LogSpace=$((48 - ${#LogContent}))
      local LogSpaceHalf=$(($LogSpace / 2))
      for i in $($InternalBusyBox seq 1 $LogSpaceHalf); do
        $InternalBusyBox printf "-" >>"$TempFolder/InstallLog.log"
      done
      $InternalBusyBox printf "%s" "$LogContent" >>"$TempFolder/InstallLog.log"
      if [ $((($LogSpace % 2))) == "1" ]; then
        LogSpaceHalf=$(($LogSpaceHalf + 1))
      fi
      for i in $($InternalBusyBox seq 1 $LogSpaceHalf); do
        $InternalBusyBox printf "-" >>"$TempFolder/InstallLog.log"
      done
      printf "\n" >>"$TempFolder/InstallLog.log"
      ;;
    *)
      $InternalBusyBox printf "%-16s:%s\n" "$LogAction" "$LogContent" >>"$TempFolder/InstallLog.log"
      ;;
    esac
  fi
}
Log Divide

# Get Package Infomation
unzip -o "$PackageSource" Config.ini -d "$TempFolder"
Log Center "Package Informations"
PackageName=$(INIRead "$TempFolder/Config.ini" Package PackageName) && Log "Package" "$PackageName"
PackageDevice=$(INIRead "$TempFolder/Config.ini" Package Device) && Log "Target Device" "$PackageDevice"
PackageMode=$(INIRead "$TempFolder/Config.ini" Package Mode) && Log "Mode" "$PackageMode"
Log Divide

# Decompress binaries
unzip -o "$PackageSource" "bin/unzip_$Architecture" -d "$TempFolder"
unzip -o "$PackageSource" "bin/tar_$Architecture" -d "$TempFolder"
unzip -o "$PackageSource" "bin/busybox_$Architecture" -d "$TempFolder"
chmod -R 755 "$TempFolder/bin/"

export InternalUnzip="$TempFolder/bin/unzip_$Architecture"
export InternalTar="$TempFolder/bin/tar_$Architecture"
export InternalBusyBox="$TempFolder/bin/busybox_$Architecture"

# Set SELinux to Permissive
setenforce 0

# Detect Device Information
Log Center "Device Informations"
DeviceName=$(getprop ro.product.board) && Log "Device" "$DeviceName"
DeviceDevelopName=$(getprop ro.product.device) && Log "Developing Name" "$DeviceDevelopName"
DeviceBrand=$(getprop ro.product.brand) && Log "Brand" "$DeviceBrand"
DeviceAndroidVersion=$(getprop ro.build.version.release) && Log "Android Version" "$DeviceAndroidVersion"
DeviceSDKVersion=$(getprop ro.build.version.sdk) && Log "SDK Version" "$DeviceSDKVersion"

# Detect A/B Partition and system-as-root
if [ $(getprop ro.build.system_root_image) == "true" ]; then
  if [ -z $(getprop ro.boot.slot_suffix) ]; then
    DeviceABPartition="Aonly" && Log "A/B Partition" "$DeviceABPartition"
  else
    DeviceABPartition="AB" && Log "A/B Partition" "$DeviceABPartition"
    DeviceActiveSlot=$(getprop ro.boot.slot_suffix) && Log "A/B Active Slot" "$DeviceActiveSlot"
    PackageABSlot=$(INIRead "$TempFolder/Config.ini" Package ABSlot) && Log "Package Slot" "$PackageABSlot"
    case $PackageABSlot in
    A)
      PackageInstallSlot="_a"
      ;;
    B)
      PackageInstallSlot="_b"
      ;;
    Current)
      PackageInstallSlot=$DeviceActiveSlot
      ;;
    *)
      PackageInstallSlot=$DeviceActiveSlot
      ;;
    esac
  fi
else
  DeviceABPartition="false" && Log "A/B Partition" "$DeviceABPartition"
fi
Log Divide

# Create Essential Folders
$InternalBusyBox mkdir "$TempFolder/Mounted"
for CreateFolder in system vendor oem modem persist; do
  $InternalBusyBox mkdir "$TempFolder/Mounted/$CreateFolder"
done

# Avoid Mount/Unmount Partatition Repeated
UnmountParatition() {
  local WillUnmountPath=$1
  local WillUnmountType=$2
  case "$WillUnmountType" in
  Device)
    WillUnmountFullPath="/dev/block/bootdevice/by-name/$WillUnmountPath"
    ;;
  Folder)
    WillUnmountFullPath="$TempFolder/Mounted/$WillUnmountPath"
    ;;
  RootFolder)
    WillUnmountFullPath="/$WillUnmountPath"
    ;;
  esac
  if [ ! -z "$($InternalBusyBox mount | $InternalBusyBox grep $WillUnmountPath)" ]; then
    $InternalBusyBox umount "$WillUnmountFullPath"
    $InternalBusyBox umount -l "$WillUnmountFullPath"
    Log "umount" "$WillUnmountFullPath"
  fi
}
MountParatition() {
  local WillMountPartition="$1"
  local WillMountPath="$2"
  if [ -z "$($InternalBusyBox mount | $InternalBusyBox grep $WillMountPartition)" ]; then
    if [ ! -z "$($InternalBusyBox mount | $InternalBusyBox grep $WillMountPath)" ]; then
      UnmountParatition $WillMountPath Folder
    fi
    $InternalBusyBox mount -w "/dev/block/bootdevice/by-name/$WillMountPartition" "$TempFolder/Mounted/$WillMountPath" && Log "mount" "/dev/block/bootdevice/by-name/$WillMountPartition"
  fi
}
UnmountAllPartatition() {
  Log "umount" "All Partations --->"
  for UnmountName in system system_root system_a system_b vendor vendor_a vendor_b oem oem_a oem_b modem modem_a modem_b cache persist; do
    UnmountParatition $UnmountName Folder
    UnmountParatition $UnmountName RootFolder
  done
  Log Divide
}

# Prepare to Deploy
echo "ui_print ===========================================" >"$PrintOut"
if [ -z "$PackageName" ]; then
  echo "ui_print Android Universe Module Deployer" >"$PrintOut"
else
  echo "ui_print $PackageName" >"$PrintOut"
  echo "ui_print Powered by Android Universe Module Deployer" >"$PrintOut"
fi
echo "ui_print ===========================================" >"$PrintOut"
UnmountAllPartatition

# Get Modules list
$InternalUnzip -Z -1 "$PackageSource" | grep Modules >"$TempFolder/ModulesList.txt"
case "$PackageMode" in
ZIP)
  $InternalBusyBox sed -i '1d' "$TempFolder/ModulesList.txt"
  ;;
Direct)
  >"$TempFolder/ModulesListNew.txt"
  $InternalBusyBox sed -i '1d' "$TempFolder/ModulesList.txt"
  for PackageModuleList in $(cat "$TempFolder/ModulesList.txt"); do
    PackageModuleFile=$(echo $PackageModuleList | $InternalBusyBox awk -F '/' '{print "Modules/"$2}')
    if [ "$PackageModuleFile" != "$($InternalBusyBox tail -n 1 "$TempFolder/ModulesListNew.txt")" ]; then
      echo "$PackageModuleFile" >>"$TempFolder/ModulesListNew.txt"
    fi
  done
  $InternalBusyBox rm "$TempFolder/ModulesList.txt"
  $InternalBusyBox mv "$TempFolder/ModulesListNew.txt" "$TempFolder/ModulesList.txt"
  ;;
TAR) ;;

*)
  echo "ui_print ! ERROR: Unknown Modules Mode" >"$PrintOut"
  exit 1
  ;;
esac

# Calculation Progress
PackageModuleCount=$($InternalBusyBox wc -l "$TempFolder/ModulesList.txt" | $InternalBusyBox awk -F ' ' '{print $1}') && Log "Module Count" "$PackageModuleCount"
ProgressIncrease=$((800000 / PackageModuleCount))
CurrentProgress=100000
echo "set_progress 0.$CurrentProgress" >"$PrintOut"

# Deploy Modules
for ModuleExtractedPath in $(cat "$TempFolder/ModulesList.txt"); do
  Log Divide
  # Get Modules Infomation
  case "$PackageMode" in
  ZIP)
    $InternalUnzip -o "$PackageSource" "$ModuleExtractedPath" -d "$TempFolder/ModuleExtracted/"
    ModulePath="$TempFolder/ModuleExtracted/${ModuleExtractedPath%.zip}"
    $InternalUnzip -o "$TempFolder/ModuleExtracted/$ModuleExtractedPath" "Config.ini" -d "$ModulePath"
    ;;
  Direct)
    $InternalUnzip -o "$PackageSource" "$ModuleExtractedPath/Config.ini" -d "$TempFolder/ModuleExtracted/"
    ModulePath="$TempFolder/ModuleExtracted/${ModuleExtractedPath}"
    ;;
  TAR) ;;
  esac

  ModuleName=$(INIRead "$ModulePath/Config.ini" Module ModuleName) && Log "Module" "$ModuleName"
  ModuleVersion=$(INIRead "$ModulePath/Config.ini" Module Version) && Log "Version" "$ModuleVersion"
  ModuleVersionCode=$(INIRead "$ModulePath/Config.ini" Module VersionCode) && Log "Version Code" "$ModuleVersionCode"
  ModulePart=$(INIRead "$ModulePath/Config.ini" Module ModulePart) && Log "Part" "$ModulePart"
  ModuleEnabled=$(INIRead "$ModulePath/Config.ini" Module Enabled) && Log "Enabled" "$ModuleEnabled"
  ModuleDescription=$(INIRead "$ModulePath/Config.ini" Module Description) && Log "Description" "$ModuleDescription"
  if [ "$ModuleEnabled" == "true" ]; then
    ModuleInstallState="Normal"
  else
    ModuleInstallState="Disabled"
  fi

  echo "ui_print > Module     : ${ModuleName}" >"$PrintOut"
  echo "ui_print > Version    : ${ModuleVersion}" >"$PrintOut"
  if [ ! -z "$ModuleDescription" ]; then
    echo "ui_print > Description: ${ModuleDescription}" >"$PrintOut"
  fi
  case "$ModuleInstallState" in
  Normal)
    # Decompress Files
    echo "ui_print - Extracting Module" >"$PrintOut"
    case "$PackageMode" in
    ZIP)
      $InternalUnzip -o "$TempFolder/ModuleExtracted/$ModuleExtractedPath" -d "$ModulePath"
      ;;
    Direct)
      $InternalUnzip -o "$PackageSource" "$ModuleExtractedPath/*" -d "$TempFolder/ModuleExtracted/"
      ;;
    TAR) ;;
    esac

    # Get Modules Files Target
    echo "ui_print - Deploying Files" >"$PrintOut"
    for ModulePartCurrent in $(echo $ModulePart | awk -F ',' '{len=split($0,n); for(i=1;i<=len;++i) print n[i]}'); do
      if [ "$DeviceABPartition" == "AB" ]; then
        ModuleABSlot=$(INIRead "$ModulePath/Config.ini" Module ModuleABSlot)
        case "$ModuleABSlot" in
        A)
          ModuleInstallSlot="_a"
          ;;
        B)
          ModuleInstallSlot="_b"
          ;;
        Current)
          ModuleInstallSlot="$DeviceActiveSlot"
          ;;
        Follow)
          ModuleInstallSlot="$PackageInstallSlot"
          ;;
        *)
          ModuleInstallSlot="$PackageInstallSlot"
          ;;
        esac
      fi

      case "$ModulePartCurrent" in
      system)
        case "$DeviceABPartition" in
        AB)
          MountParatition "system$PackageInstallSlot" "system"
          export SystemMountedPoint="$TempFolder/Mounted/system/system"
          ;;
        Aonly)
          MountParatition "system_root" "system"
          export SystemMountedPoint="$TempFolder/Mounted/system/system"
          ;;
        false)
          MountParatition "system" "system"
          export SystemMountedPoint="$TempFolder/Mounted/system"
          ;;
        esac
        $InternalBusyBox cp -rf "$ModulePath/system/*" "$SystemMountedPoint/" && Log "Copy Files" "From $ModulePath/system/* to $SystemMountedPoint/"
        ;;
      vendor)
        case "$DeviceABPartition" in
        AB)
          MountParatition "vendor$PackageInstallSlot" "vendor"
          export VendorMountedPoint="$TempFolder/Mounted/vendor"
          ;;
        Aonly)
          MountParatition "vendor" "vendor"
          export VendorMountedPoint="$TempFolder/Mounted/vendor"
          ;;
        false)
          MountParatition "system" "system"
          export VendorMountedPoint="$TempFolder/Mounted/system/vendor"
          ;;
        esac
        $InternalBusyBox cp -rf "$ModulePath/vendor/*" "$VendorMountedPoint/" && Log "Copy Files" "From $ModulePath/vendor/* to $VendorMountedPoint/"
        ;;
      modem)
        MountParatition "modem$PackageInstallSlot" "modem"
        export ModemMountedPoint="$TempFolder/Mounted/vendor"
        $InternalBusyBox cp -rf "$ModulePath/modem/*" "$ModemMountedPoint/" && Log "Copy Files" "From $ModulePath/modem/* to $ModemMountedPoint/"
        ;;
      sony_oem)
        if [ "$DeviceBrand" == "Sony" ]; then
          MountParatition "oem$PackageInstallSlot" "oem"
          export SonyOEMMountedPoint="$TempFolder/Mounted/vendor"
          $InternalBusyBox cp -rf "$ModulePath/oem/*" "$SonyOEMMountedPoint/" && Log "Copy Files" "From $ModulePath/oem/* to $SonyOEMMountedPoint/"
        else
          echo "ui_print - WARNING: Your device isn't Sony Xperia devices. Part \"sony_oem\" isn't install." >"$PrintOut" && Log "WARNING" "Require Device \"Sony\""
        fi
        ;;
      esac
    done

    # Execute Custom Script
    if [ -e "$ModulePath/Config.sh" ]; then
      echo "ui_print - Running Additional Script" >"$PrintOut"
      $InternalBusyBox sh "$ModulePath/Config.sh" && Log "Script Execute" "$ModulePath/Config.sh"
    fi
    echo "ui_print - Install Completed" >"$PrintOut"
    ;;
  Disabled)
    echo "ui_print - Module \"$ModuleName\" isn't installed because it was been disabled" >"$PrintOut"
    ;;
  *)
    echo "ui_print ! ERROR: Unknown install state. Module \"$ModuleName\" isn't installed." >"$PrintOut"
    ;;
  esac

  $InternalBusyBox rm -rf "$ModulePath" && Log "Delete Folder" "$ModulePath"
  echo "ui_print -------------------------------------------" >"$PrintOut"

  # Set Progress
  CurrentProgress=$(($CurrentProgress + $ProgressIncrease))
  echo "set_progress 0.$CurrentProgress" >"$PrintOut"

done
Log Divide
echo "ui_print   All Modules are installed successfully." >"$PrintOut" && Log Center "Module Install Completed"

# Set Permissions
echo "ui_print - Setting Premissions" >"$PrintOut"
if [ "$DeviceABPartition" == "Aonly" ]; then
  PkgInstallSlot="_root"
fi
MountParatition "system$PkgInstallSlot" "system"
for PermissionPath in app priv-app; do
  if [ "$DeviceABPartition" == "Aonly" ] || [ "$DeviceABPartition" == "AB" ]; then
    $InternalBusyBox find "$TempFolder/Mounted/system/system/$PermissionPath" -type f | xargs $InternalBusyBox chmod 644
    $InternalBusyBox find "$TempFolder/Mounted/system/system/$PermissionPath" -type d | xargs $InternalBusyBox chmod 755
  else
    $InternalBusyBox find "$TempFolder/Mounted/system/$PermissionPath" -type f | xargs $InternalBusyBox chmod 644
    $InternalBusyBox find "$TempFolder/Mounted/system/$PermissionPath" -type d | xargs $InternalBusyBox chmod 755
  fi
done

UnmountAllPartatition
echo "ui_print   Deploy Completed" >"$PrintOut"
echo "ui_print ===========================================" >"$PrintOut"
echo "set_progress 1.000000" >"$PrintOut"

exit 0
