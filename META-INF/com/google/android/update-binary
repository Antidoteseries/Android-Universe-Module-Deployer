#!/sbin/sh
# Deploy script for recovery
# This is a part of Android Universe Module Deployer
# Author: Antidotes
# Source: https://github.com/Antidoteseries/Android-Universe-Module-Deployer
# Licenced by GPLv3
# Version: 0.3.3 Alpha
###########################################################################

# Initial Define
export PackageSource="$3"
export PrintFD="/proc/self/fd/$2"
export TempFolder="/tmp"
export LogEnabled="true"

# Printout for Recovery
Printout() {
  local PrintAction="$1"
  local PrintContent="$2"
  case "$PrintAction" in
  Divide2Line)
    echo "ui_print ================================================" >>"$PrintFD"
    ;;
  Divide)
    echo "ui_print ------------------------------------------------" >>"$PrintFD"
    ;;
  Single)
    echo "ui_print $PrintContent" >>"$PrintFD"
    ;;
  Center)
    local PrintSpace=$((48 - ${#PrintContent}))
    local PrintSpaceHalf=$(($PrintSpace / 2))
    for i in $($InternalBusyBox seq 1 $PrintSpaceHalf); do
      PrintContentNew="$PrintContentNew""-"
    done
    PrintContentNew="$PrintContentNew""$PrintContent"
    if [ $((($LogSpace % 2))) == "1" ]; then
      LogSpaceHalf=$(($LogSpaceHalf + 1))
    fi
    for i in $($InternalBusyBox seq 1 $PrintSpaceHalf); do
      PrintContentNew="$PrintContentNew""-"
    done
    echo "ui_print $PrintContentNew" >>"$PrintFD"
    ;;
  Error)
    echo "ui_print ! Error:$PrintContent" >>"$PrintFD"
    ;;
  Info)
    echo "ui_print > $PrintContent" >>"$PrintFD"
    ;;
  Warning)
    echo "ui_print ! Warning:$PrintContent" >>"$PrintFD"
    ;;
  *)
    echo "ui_print - $PrintContent" >>"$PrintFD"
    ;;
  esac
}
SetProgress() {
  local ProgressNow="$1"
  echo "set_progress $ProgressNow" >>"$PrintFD"
}

# Prepare for getting data from Config.ini
INIRead() {
  local INIFile="$1"
  local INISect="$2"
  local INIKey="$3"
  local INIResult="$($InternalBusyBox awk -F '=' '/\['$INISect'\]/ {FIND=1} FIND==1 && $1~/'$INIKey'/ {print $2;exit}' $INIFile)"
  echo "$INIResult"
}

# Prepare Log
if [ "$LogEnabled" == "true" ]; then
  echo "Install Log for Android Universe Module Deployer" >"$TempFolder/InstallLog.log"
fi
Log() {
  if [ "$LogEnabled" == "true" ]; then
    local LogAction="$1"
    local LogContent="$2"
    case "$LogAction" in
    Divide2Line)
      echo "================================================" >>"$TempFolder/InstallLog.log"
      ;;
    Divide)
      echo "------------------------------------------------" >>"$TempFolder/InstallLog.log"
      ;;
    Single)
      echo "$LogContent" >>"$TempFolder/InstallLog.log"
      ;;
    Center)
      local LogSpace=$((48 - ${#LogContent}))
      local LogSpaceHalf=$(($LogSpace / 2))
      for i in $($InternalBusyBox seq 1 $LogSpaceHalf); do
        $InternalBusyBox printf "-" >>"$TempFolder/InstallLog.log"
      done
      $InternalBusyBox printf "%s" "$LogContent" >>"$TempFolder/InstallLog.log"
      if [ $((($LogSpace % 2))) == "1" ]; then
        LogSpaceHalf=$(($LogSpaceHalf + 1))
      fi
      for i in $($InternalBusyBox seq 1 $LogSpaceHalf); do
        $InternalBusyBox printf "-" >>"$TempFolder/InstallLog.log"
      done
      $InternalBusyBox printf "\n" >>"$TempFolder/InstallLog.log"
      ;;
    *)
      $InternalBusyBox printf "%-16s: %s\n" "$LogAction" "$LogContent" >>"$TempFolder/InstallLog.log"
      ;;
    esac
  fi
}

# Exit Capture
ExitMode() {
  local ExitCode="$1"
  local ExitReason="$2"
  if [ "$ExitCode" == "0" ]; then
    Log Single "Exit with Code $ExitCode. Completed."
    exit 0
  else
    Log Single "Exit with Code $ExitCode. Error:$ExitReason"
    Printout Error "$ExitReason"
    Printout Divide
    Printout Single "Please contact package provider and make sure it was compatible with your device."
    Printout Single "Install Log is saved at \"$TempFolder/InstallLog.log\""
    exit $ExitCode
  fi
}

# Get Package Infomation
unzip -o "$PackageSource" "Config.ini" -d "$TempFolder"
Log Center "Package Informations"
PackageName=$(INIRead "$TempFolder/Config.ini" Package PackageName) && Log "Package" "$PackageName"
PackageDevice=$(INIRead "$TempFolder/Config.ini" Package Device) && Log "Target Device" "$PackageDevice"
PackageMode=$(INIRead "$TempFolder/Config.ini" Package Mode) && Log "Mode" "$PackageMode"

# Detect CPU Architecture
case "$(uname -m)" in
*86*) export Architecture="x86" ;;
*ar*) export Architecture="arm" ;;
*)
  ExitMode 100 "Unsupported Architecture"
  ;;
esac

# Decompress binaries
unzip -o "$PackageSource" "bin/unzip_$Architecture" -d "$TempFolder"
unzip -o "$PackageSource" "bin/tar_$Architecture" -d "$TempFolder"
unzip -o "$PackageSource" "bin/busybox_$Architecture" -d "$TempFolder"
chmod -R 755 "$TempFolder/bin/"

export InternalUnzip="$TempFolder/bin/unzip_$Architecture"
export InternalTar="$TempFolder/bin/tar_$Architecture"
export InternalBusyBox="$TempFolder/bin/busybox_$Architecture"

# Set SELinux to Permissive
setenforce 0

# Detect Device Information
Log Center "Device Informations"
DeviceName=$(getprop ro.product.board) && Log "Device" "$DeviceName"
DeviceDevelopName=$(getprop ro.product.device) && Log "Developing Name" "$DeviceDevelopName"
DeviceBrand=$(getprop ro.product.brand) && Log "Brand" "$DeviceBrand"
DeviceAndroidVersion=$(getprop ro.build.version.release) && Log "Android Version" "$DeviceAndroidVersion"
DeviceSDKVersion=$(getprop ro.build.version.sdk) && Log "SDK Version" "$DeviceSDKVersion"
Log "Architecture" "$Architecture"

# Detect A/B Partition and system-as-root
if [ $(getprop ro.build.system_root_image) == "true" ]; then
  if [ -z $(getprop ro.boot.slot_suffix) ]; then
    DeviceABPartition="Aonly" && Log "A/B Partition" "$DeviceABPartition"
  else
    DeviceABPartition="AB" && Log "A/B Partition" "$DeviceABPartition"
    DeviceActiveSlot=$(getprop ro.boot.slot_suffix) && Log "A/B Active Slot" "$DeviceActiveSlot"
    PackageABSlot=$(INIRead "$TempFolder/Config.ini" Package ABSlot) && Log "Package Slot" "$PackageABSlot"
    case $PackageABSlot in
    A)
      PackageInstallSlot="_a"
      ;;
    B)
      PackageInstallSlot="_b"
      ;;
    Current)
      PackageInstallSlot=$DeviceActiveSlot
      ;;
    *)
      PackageInstallSlot=$DeviceActiveSlot
      ;;
    esac
  fi
else
  DeviceABPartition="false" && Log "A/B Partition" "$DeviceABPartition"
fi

# Create Essential Folders
$InternalBusyBox mkdir "$TempFolder/Mounted"
for CreateFolder in system vendor oem modem persist; do
  $InternalBusyBox mkdir "$TempFolder/Mounted/$CreateFolder"
done

# Avoid Mount/Unmount Partatition Repeated
UnmountParatition() {
  local WillUnmountPath=$1
  local WillUnmountType=$2
  case "$WillUnmountType" in
  Device)
    WillUnmountFullPath="/dev/block/bootdevice/by-name/$WillUnmountPath"
    ;;
  Folder)
    WillUnmountFullPath="$TempFolder/Mounted/$WillUnmountPath"
    ;;
  RootFolder)
    WillUnmountFullPath="/$WillUnmountPath"
    ;;
  esac
  if [ ! -z "$($InternalBusyBox mount | $InternalBusyBox grep $WillUnmountPath)" ]; then
    $InternalBusyBox umount "$WillUnmountFullPath"
    $InternalBusyBox umount -l "$WillUnmountFullPath"
    Log "umount" "$WillUnmountFullPath"
  fi
}
MountParatition() {
  local WillMountPartition="$1"
  local WillMountPath="$2"
  if [ -z "$($InternalBusyBox mount | $InternalBusyBox grep $WillMountPartition)" ]; then
    if [ ! -z "$($InternalBusyBox mount | $InternalBusyBox grep $WillMountPath)" ]; then
      UnmountParatition $WillMountPath Folder
    fi
    $InternalBusyBox mount -rw "/dev/block/bootdevice/by-name/$WillMountPartition" "$TempFolder/Mounted/$WillMountPath" && Log "mount -rw" "/dev/block/bootdevice/by-name/$WillMountPartition"
  fi
}
UnmountAllPartatition() {
  Log Single "umount: All Partations --->"
  for UnmountName in system system_root system_a system_b vendor vendor_a vendor_b oem oem_a oem_b modem modem_a modem_b cache persist; do
    UnmountParatition $UnmountName Folder
    UnmountParatition $UnmountName RootFolder
  done
}

# Prepare to Deploy
Printout Divide2Line
if [ -z "$PackageName" ]; then
  Printout Single "Android Universe Module Deployer"
else
  Printout Single "$PackageName"
  Printout Single "Powered by Android Universe Module Deployer"
fi
Printout Divide2Line
UnmountAllPartatition

# Get Modules list
$InternalUnzip -Z -1 "$PackageSource" | grep Modules >"$TempFolder/ModulesList.txt"
case "$PackageMode" in
Direct)
  >"$TempFolder/ModulesListNew.txt"
  $InternalBusyBox sed -i '1d' "$TempFolder/ModulesList.txt"
  for PackageModuleList in $(cat "$TempFolder/ModulesList.txt"); do
    PackageModuleFile=$(echo $PackageModuleList | $InternalBusyBox awk -F '/' '{print "Modules/"$2}')
    if [ "$PackageModuleFile" != "$($InternalBusyBox tail -n 1 "$TempFolder/ModulesListNew.txt")" ]; then
      echo "$PackageModuleFile" >>"$TempFolder/ModulesListNew.txt"
    fi
  done
  $InternalBusyBox rm "$TempFolder/ModulesList.txt"
  $InternalBusyBox mv "$TempFolder/ModulesListNew.txt" "$TempFolder/ModulesList.txt"
  ;;
zip)
  $InternalBusyBox sed -i '1d' "$TempFolder/ModulesList.txt"
  ;;
tar)
  $InternalBusyBox sed -i '1d' "$TempFolder/ModulesList.txt"
  ;;
targz)
  $InternalBusyBox sed -i '1d' "$TempFolder/ModulesList.txt"
  ;;
tarbz2)
  $InternalBusyBox sed -i '1d' "$TempFolder/ModulesList.txt"
  ;;
*)
  ExitMode 101 "Unknown Modules Mode"
  ;;
esac

Log Divide2Line
Log Center "Module Infomations"
# Calculation Progress
PackageModuleCount=$($InternalBusyBox wc -l "$TempFolder/ModulesList.txt" | $InternalBusyBox awk -F ' ' '{print $1}') && Log "Module Count" "$PackageModuleCount"
ProgressIncrease=$((800000 / PackageModuleCount))
CurrentProgress=100000
SetProgress "0.$CurrentProgress"

# Deploy Modules
for ModuleExtractedPath in $(cat "$TempFolder/ModulesList.txt"); do
  Log Divide
  $InternalBusyBox mkdir "$TempFolder/ModuleExtracted/$ModuleExtractedPath"
  # Get Modules Infomation
  case "$PackageMode" in
  Direct)
    $InternalUnzip -o "$PackageSource" "$ModuleExtractedPath/Config.ini" -d "$TempFolder/ModuleExtracted/"
    ModulePath="$TempFolder/ModuleExtracted/${ModuleExtractedPath}"
    ;;
  zip)
    $InternalUnzip -o "$PackageSource" "$ModuleExtractedPath" -d "$TempFolder/ModuleExtracted/"
    ModulePath="$TempFolder/ModuleExtracted/${ModuleExtractedPath%.zip}"
    $InternalUnzip -o "$TempFolder/ModuleExtracted/$ModuleExtractedPath" "Config.ini" -d "$ModulePath"
    ;;
  tar)
$InternalUnzip -o "$PackageSource" "$ModuleExtractedPath" -d "$TempFolder/ModuleExtracted/"
    ModulePath="$TempFolder/ModuleExtracted/${ModuleExtractedPath%.tar}"
    $InternalTar -xf "$ModulePath" "Config.ini" -C "$TempFolder/ModuleExtracted/$ModuleExtractedPath"
  ;;
  targz)
  $InternalUnzip -o "$PackageSource" "$ModuleExtractedPath" -d "$TempFolder/ModuleExtracted/"
    ModulePath="$TempFolder/ModuleExtracted/${ModuleExtractedPath%.tar.gz}"
    $InternalTar -zxf "$ModulePath" "Config.ini" -C "$TempFolder/ModuleExtracted/$ModuleExtractedPath"
   ;;
  tarbz2) 
  $InternalUnzip -o "$PackageSource" "$ModuleExtractedPath" -d "$TempFolder/ModuleExtracted/"
    ModulePath="$TempFolder/ModuleExtracted/${ModuleExtractedPath%.tar.bz2}"
    $InternalTar -jxf "$ModulePath" "Config.ini" -C "$TempFolder/ModuleExtracted/$ModuleExtractedPath"
  ;;
  esac

  ModuleName=$(INIRead "$ModulePath/Config.ini" Module ModuleName) && Log "Module" "$ModuleName"
  ModuleVersion=$(INIRead "$ModulePath/Config.ini" Module Version) && Log "Version" "$ModuleVersion"
  ModuleVersionCode=$(INIRead "$ModulePath/Config.ini" Module VersionCode) && Log "Version Code" "$ModuleVersionCode"
  ModulePart=$(INIRead "$ModulePath/Config.ini" Module ModulePart) && Log "Part" "$ModulePart"
  ModuleEnabled=$(INIRead "$ModulePath/Config.ini" Module Enabled) && Log "Enabled" "$ModuleEnabled"
  ModuleDescription=$(INIRead "$ModulePath/Config.ini" Module Description) && Log "Description" "$ModuleDescription"
  if [ "$ModuleEnabled" == "true" ]; then
    ModuleInstallState="Normal"
  else
    ModuleInstallState="Disabled"
  fi

  Printout Info "Module     : ${ModuleName}"
  Printout Info "Version    : ${ModuleVersion}"
  if [ ! -z "$ModuleDescription" ]; then
    Printout Info "Description: ${ModuleDescription}"
  fi
  case "$ModuleInstallState" in
  Normal)
    # Decompress Files
    Printout Normal "Extracting Module"
    case "$PackageMode" in
    Direct)
      $InternalUnzip -o "$PackageSource" "$ModuleExtractedPath/*" -d "$TempFolder/ModuleExtracted/"
      ;;
         zip)
      $InternalUnzip -o "$TempFolder/ModuleExtracted/$ModuleExtractedPath" -d "$ModulePath"
      ;;
      tar)
   $InternalTar -xf "$ModulePath" -C "$TempFolder/ModuleExtracted/$ModuleExtractedPath"
  ;;
  targz)
   $InternalTar -zxf "$ModulePath"  -C "$TempFolder/ModuleExtracted/$ModuleExtractedPath" ;;
  tarbz2) 
   $InternalTar -jxf "$ModulePath" "Config.ini" -C "$TempFolder/ModuleExtracted/$ModuleExtractedPath";;
    esac

    # Get Modules Files Target
    Printout Normal "Deploying Files"
    for ModulePartCurrent in $(echo $ModulePart | awk -F ',' '{len=split($0,n); for(i=1;i<=len;++i) print n[i]}'); do
      if [ "$DeviceABPartition" == "AB" ]; then
        ModuleABSlot=$(INIRead "$ModulePath/Config.ini" Module ModuleABSlot)
        case "$ModuleABSlot" in
        A)
          ModuleInstallSlot="_a"
          ;;
        B)
          ModuleInstallSlot="_b"
          ;;
        Current)
          ModuleInstallSlot="$DeviceActiveSlot"
          ;;
        Follow)
          ModuleInstallSlot="$PackageInstallSlot"
          ;;
        *)
          ModuleInstallSlot="$PackageInstallSlot"
          ;;
        esac
      fi

      case "$ModulePartCurrent" in
      system)
        case "$DeviceABPartition" in
        AB)
          MountParatition "system$PackageInstallSlot" "system"
          export SystemMountedPoint="$TempFolder/Mounted/system/system"
          ;;
        Aonly)
          MountParatition "system_root" "system"
          export SystemMountedPoint="$TempFolder/Mounted/system/system"
          ;;
        false)
          MountParatition "system" "system"
          export SystemMountedPoint="$TempFolder/Mounted/system"
          ;;
        esac
        $InternalBusyBox cp -rf "$ModulePath/system/." "$SystemMountedPoint/" && Log "Copy Files" "From $ModulePath/system/. to $SystemMountedPoint/"
        ;;
      vendor)
        case "$DeviceABPartition" in
        AB)
          MountParatition "vendor$PackageInstallSlot" "vendor"
          export VendorMountedPoint="$TempFolder/Mounted/vendor"
          ;;
        Aonly)
          MountParatition "vendor" "vendor"
          export VendorMountedPoint="$TempFolder/Mounted/vendor"
          ;;
        false)
          MountParatition "system" "system"
          export VendorMountedPoint="$TempFolder/Mounted/system/vendor"
          ;;
        esac
        $InternalBusyBox cp -rf "$ModulePath/vendor/." "$VendorMountedPoint/" && Log "Copy Files" "From $ModulePath/vendor/* to $VendorMountedPoint/"
        ;;
      modem)
        MountParatition "modem$PackageInstallSlot" "modem"
        export ModemMountedPoint="$TempFolder/Mounted/vendor"
        $InternalBusyBox cp -rf "$ModulePath/modem/." "$ModemMountedPoint/" && Log "Copy Files" "From $ModulePath/modem/* to $ModemMountedPoint/"
        ;;
      sony_oem)
        if [ "$DeviceBrand" == "Sony" ]; then
          MountParatition "oem$PackageInstallSlot" "oem"
          export SonyOEMMountedPoint="$TempFolder/Mounted/vendor"
          $InternalBusyBox cp -rf "$ModulePath/oem/." "$SonyOEMMountedPoint/" && Log "Copy Files" "From $ModulePath/oem/* to $SonyOEMMountedPoint/"
        else
          Printout Warning "Your device isn't Sony Xperia devices. Part \"sony_oem\" isn't install." && Log Warning "Require Device \"Sony\""
        fi
        ;;
      esac
    done

    # Execute Custom Script
    if [ -e "$ModulePath/Config.sh" ]; then
      Printout Normal "Running Additional Script"
      $InternalBusyBox sh "$ModulePath/Config.sh" && Log "Script Execute" "$ModulePath/Config.sh"
    fi
    Printout Normal "Install Completed"
    ;;
  Disabled)
    Printout Normal "Module \"$ModuleName\" isn't installed because it was been disabled"
    ;;
  *)
    Printout Error "Unknown install state. Module \"$ModuleName\" isn't installed."
    ;;
  esac

  $InternalBusyBox rm -rf "$ModulePath" && Log "Delete Folder" "$ModulePath"
  Printout Divide

  # Set Progress
  CurrentProgress=$(($CurrentProgress + $ProgressIncrease))
  SetProgress "0.$CurrentProgress"

done
Printout Normal "All Modules are installed successfully." && Log Center "Module Install Completed"
Log Divide2Line

# Set Permissions
Printout Normal "Setting Premissions"
if [ "$DeviceABPartition" == "Aonly" ]; then
  PackageInstallSlot="_root"
fi
MountParatition "system$PackageInstallSlot" "system"
for PermissionPath in app priv-app; do
  if [ "$DeviceABPartition" == "Aonly" ] || [ "$DeviceABPartition" == "AB" ]; then
    $InternalBusyBox find "$TempFolder/Mounted/system/system/$PermissionPath" -type f | xargs $InternalBusyBox chmod 644
    $InternalBusyBox find "$TempFolder/Mounted/system/system/$PermissionPath" -type d | xargs $InternalBusyBox chmod 755
  else
    $InternalBusyBox find "$TempFolder/Mounted/system/$PermissionPath" -type f | xargs $InternalBusyBox chmod 644
    $InternalBusyBox find "$TempFolder/Mounted/system/$PermissionPath" -type d | xargs $InternalBusyBox chmod 755
  fi
done

UnmountAllPartatition
Printout Normal "Deploy Completed"
Printout Divide2Line
SetProgress 1.000000

ExitMode 0
